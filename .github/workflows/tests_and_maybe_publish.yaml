name: tests.yaml
on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main
jobs:
  #
  # Tests our wrappers by building them and running our JS tests on them.
  #
  build-and-test-js:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest, macos-13]
        architecture: [x64]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Get {platform}-{arch} name
        id: prebuild
        shell: bash
        run: |
          PREBUILD_FOLDER_NAME=$(node -p "require('os').platform() + '-' + require('os').arch()")
          echo "PREBUILD_FOLDER_NAME=$PREBUILD_FOLDER_NAME" >> $GITHUB_OUTPUT
      - name: Compute cache key
        id: cache-key
        shell: bash
        run: echo "hash=${{ hashFiles('src/**/*.cpp', 'src/**/*.hpp', 'third_party/**/*.*') }}" >> $GITHUB_OUTPUT
      - name: Cache ${{ steps.prebuild.outputs['PREBUILD_FOLDER_NAME'] }} build
        id: cache-build
        uses: actions/cache@v4
        with:
          path: prebuilds/${{ steps.prebuild.outputs['PREBUILD_FOLDER_NAME'] }}
          key: build-${{ steps.prebuild.outputs['PREBUILD_FOLDER_NAME'] }}-${{ steps.cache-key.outputs.hash }}
          restore-keys: |
            build-${{ steps.prebuild.outputs['PREBUILD_FOLDER_NAME'] }}-${{ steps.cache-key.outputs.hash }}
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24.2.0
      - name: Install dependencies (if no cache)
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: npm install --ignore-scripts
      - name: Build (if no cache)
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: npm run prebuildify
      - name: Copy libz3.dll into prebuild folder (Windows only) (if no cache)
        if: (steps.cache-build.outputs.cache-hit != 'true') && (matrix.os == 'windows-latest')
        shell: bash
        run: |
          DLL_SOURCE=third_party/z3/lib/${{ steps.prebuild.outputs['PREBUILD_FOLDER_NAME'] }}/libz3.dll
          DLL_TARGET=prebuilds/${{ steps.prebuild.outputs['PREBUILD_FOLDER_NAME'] }}/libz3.dll
          cp "$DLL_SOURCE" "$DLL_TARGET"
      - name: Upload artifact (if [publish] run)
        if: startsWith(github.event.head_commit.message, '[publish] ')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prebuild.outputs['PREBUILD_FOLDER_NAME'] }}
          path: prebuilds/${{ steps.prebuild.outputs['PREBUILD_FOLDER_NAME'] }}
      - name: Run JS tests
        shell: bash
        run: npm run test:js
        env:
          FORCE_COLOR: "1"
  #
  # Tests the underlying predictors directly in C++.
  #
  test-underlying-cpp:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache CMake tests/build/ directory
        uses: actions/cache@v4
        with:
          path: tests/build/
          key: test-${{ runner.os }}-${{ hashFiles('CMakeLists.txt', '**/*.cpp', '**/*.hpp') }}
          restore-keys: |
            test-${{ runner.os }}-${{ hashFiles('CMakeLists.txt', '**/*.cpp', '**/*.hpp') }}
      - name: Build and run tests
        run: npm test
  #
  # Publishes to NPM if commit message starts with "[publish] "
  #
  publish:
    if: startsWith(github.event.head_commit.message, '[publish] ')
    needs: [build-and-test-js, test-underlying-cpp]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org/"
      - name: Download all prebuilds
        uses: actions/download-artifact@v4
        with:
          path: prebuilds
      - name: Automated Version Bump
        uses: phips28/gh-action-bump-version@v11.0.7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          major-wording: "#major"
          minor-wording: "#minor"
          patch-wording: "#patch"
      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

